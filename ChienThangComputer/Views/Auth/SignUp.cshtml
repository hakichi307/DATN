@model ChienThangComputer.Models.Infomation

@using CaptchaMvc;
@using CaptchaMvc.HtmlHelpers;


@{
    ViewBag.Title = "SignUp";
    Layout = "~/Views/Layout/_LayoutPage.cshtml";
}

<div class="grid wide">
    <div class="layout-page-signUp">
        <h3 class="text-center signUp-heading">Tạo tài khoản</h3>
        <div class="steps">
            <div class="steps__step1--number">3</div>
            <div class="steps__step1--label">Hoàn tất thông tin</div>
        </div>
        @using (Html.BeginForm("SignUp", "Auth", FormMethod.Post, new { @enctype = "multipart/form-data", onsubmit = "return prevendDoubleSubmitForm(this)" }))
        {
            @Html.AntiForgeryToken()
            <div class="form-group">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fa fa-user"></i></span>
                    </div>
                    @Html.TextBoxFor(model => model.HoTen, new { @class = "form-control", @placeholder = "Họ và tên", autocomplete = "off" })
                </div>
                @Html.ValidationMessageFor(model => model.HoTen, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fa fa-user"></i></span>
                    </div>
                    @Html.TextBoxFor(model => model.TaiKhoan, new { @class = "form-control", @placeholder = "Tên hiển thị", autocomplete = "off" })
                </div>
                @Html.ValidationMessageFor(model => model.TaiKhoan, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fa fa-phone"></i></span>
                    </div>
                    @Html.TextBoxFor(model => model.SoDienThoai, new { @class = "form-control", @placeholder = "Phone", autocomplete = "off" })
                </div>
                @Html.ValidationMessageFor(model => model.SoDienThoai, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fa fa-map-marker-alt"></i></span>
                    </div>
                    @Html.TextBoxFor(model => model.DiaChi, new { @class = "form-control", @placeholder = "Địa chỉ", autocomplete = "off" })
                </div>
                @Html.ValidationMessageFor(model => model.DiaChi, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fa fa-lock"></i></span>
                    </div>
                    @Html.PasswordFor(model => model.MatKhau, new { @class = "form-control", @placeholder = "Mật khẩu" })
                </div>
                @Html.ValidationMessageFor(model => model.MatKhau, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fa fa-lock"></i></span>
                    </div>
                    @Html.PasswordFor(model => model.ReTypePassword, new { @class = "form-control", @placeholder = "Nhập lại mật khẩu" })
                </div>
                @Html.ValidationMessageFor(model => model.ReTypePassword, "", new { @class = "text-danger" })
            </div>
            <div class="form-group text-center">
                <p class="avatar-label">Ảnh đại diện</p>
                <div class="profile-avatar">
                    <img id="avatar-changed" src="~/Images/anonymousUser.png" width="80" height="80" />
                </div>
                <div class="profile-avatar-btn">
                    <input id="inp-fileUpload" type="file" name="fUpload" accept=".jpg,.jpeg,.png">
                    <button class="btn-uploadAvatar" type="button">Chọn ảnh</button>
                    <div class="profile-avatar-desc">
                        <span>Định dạng:.JPEG, .PNG, .JPG</span>
                    </div>
                </div>
            </div>
            <div class="form-group text-center">
                @Html.Captcha(5)
            </div>
            <div class="form-group form-group-footer">
                <input value="Đăng ký" type="submit" class="btn-signUp" name="btnRegister" />
            </div>
        }
    </div>
</div>

@section jsFooter{
    @if (TempData["CaptchaError"] != null)
    {
        <script>
            Swal.fire({
                            html: '@Html.Raw(TempData["CaptchaError"])',
                            icon: 'error',
                            confirmButtonText: 'Ok'
                        })
        </script>
    }
    <script>
        const btnUpload = $(".btn-uploadAvatar");
        const inpFileUpload = $("#inp-fileUpload");
        btnUpload.click(function () {
            inpFileUpload.trigger("click");
        })
        function prevendDoubleSubmitForm(form) {
            var lstError = $(".field-validation-valid");
            var errorCount = 0;
            setTimeout(() => {
                for (let i = 0; i < lstError.length; i++) {
                    var error = lstError[i];
                    if (error.innerHTML !== "") {
                        errorCount++;
                    }
                }
                if (errorCount == 0) {
                    form.btnRegister.disabled = true;
                    form.btnRegister.value = "Please wait...";
                    $(".btn-signUp").css("cursor", "default");
                    return false;
                }
            }, 100);
            return true;
        }

        $("#inp-fileUpload").change(function (e) {
            var val = $(this).val();
            switch (val.substring(val.lastIndexOf('.') + 1).toLowerCase()) {
                case 'gif': case 'jpg': case 'png': case 'jpeg':
                    break;
                default:

                    Swal.fire({
                        text: e.target.files[0].name + ' không phải là hình ảnh. Vui lòng thử lại!',
                        icon: 'error'
                    })
                    $(this).val('');
                    break;
            }

            if (window.FormData !== undefined) {
                var fileUpload = $(this).get(0);
                var files = fileUpload.files;
                var formData = new FormData();
                formData.append("fileUpload", files[0]);
                $.ajax({
                    type: "POST",
                    url: '/Auth/ProcessImage',
                    contentType: false,
                    processData: false,
                    data: formData,
                    success: function (res) {
                        if (res.statusCode === 200) {
                            $("#avatar-changed").attr("src", res.data);
                        } else {
                            console.log(res.message);
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.log(jqXHR.statusText);
                        console.log(errorThrown);
                    }
                })
            }
        })

    </script>
}


